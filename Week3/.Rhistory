rep(0,length(Custos))
as.matriz(rep(0,length(Custos)))
as.matrix(rep(0,length(Custos)))
as.matrix(rep(0,length(Custos)), nrow = nrow(Custos))
nrow(Custos)
matrix(rep(0,length(Custos)), nrow = nrow(Custos))
matrizero <- matrix(rep(0,length(Custos)), nrow = nrow(Custos))
matrizero[1,] <- 1
matrizero
Total*matrizero
Total%*%matrizero
Total*matrizero
ncol(matrizero)
as.vector(t(Total*matrizero))
condicoes <- matrix()
condicoes[1,] <-as.vector(t(Total*matrizero))
Total[1,]
Total[1,]
Total[1,1]
Total
Custos[1,]
condicoes[1,]
condicoes[1,] <- Condicoes[1,] + as.vector(t(Total*matrizero))
condicoes[1,] <- condicoes[1,] + as.vector(t(Total*matrizero))
condicoes <- matrix(0, ncol = 10, nrow = 10)
Condicoes <- matrix(0, ncol = length(Total), nrow = 10)
View(condicoes)
Condicoes
Condicoes <- matrix(0, ncol = length(Custos), nrow = 10)
Condicoes
Custos
Condicoes <- matrix(0, ncol = length(Custos), nrow = nrow(Custos)+ncol(Custos))
Condicoes
View(Condicoes)
View(Custos)
matrix(0, nrow = nrow(Custos), ncol = ncol(Custos))
for (i in 1:ncol(Total)){
matrizero <- matrix(0, nrow = nrow(Custos), ncol = ncol(Custos))
matrizero[i,] <- 1
Condicoes[i, ] <- as.vector(t(Total*matrizero))
}
ncol(Total)
length(Total)
ncol(Custos)
nrow(Custos)
for (i in 1:nrow(Custos)){
matrizero <- matrix(0, nrow = nrow(Custos), ncol = ncol(Custos))
matrizero[i,] <- 1
Condicoes[i, ] <- as.vector(t(Total*matrizero))
}
View(Condicoes)
rm(condicoes)
for (i in 1:ncol(Custos)){
matrizero <- matrix(0, nrow = nrow(Custos), ncol = ncol(Custos))
matrizero[,i] <- 1
Condicoes[nrow(Custos)+i,] <- as.vector(t(Total*matrizero))
}
rm(list = ls())
#Simulaçao
numfor <- 15
dados <- data.frame(
Fornecedor = letters[1:numfor],
MWh = runif(numfor, 2000, 300000),
MG = runif(numfor, 80, 250),
PA = runif(numfor, 80, 250),
RJ = runif(numfor, 80, 250),
ES = runif(numfor, 80, 250),
MA = runif(numfor, 80, 250),
MA_COMERC = runif(numfor, 80, 250)
)
Custos <- as.matrix(dados[,3:length(dados)])
#Simulação
Total <- runif(ncol(Custos), 0, 1)
Total <- Total/sum(Total)*sum(dados$MWh)
Condicoes <- matrix(0, ncol = length(Custos), nrow = nrow(Custos)+ncol(Custos))
for (i in 1:nrow(Custos)){
matrizero <- matrix(0, nrow = nrow(Custos), ncol = ncol(Custos))
matrizero[i,] <- 1
Condicoes[i, ] <- as.vector(t(Total*matrizero))
}
for (i in 1:ncol(Custos)){
matrizero <- matrix(0, nrow = nrow(Custos), ncol = ncol(Custos))
matrizero[,i] <- 1
Condicoes[nrow(Custos)+i,] <- as.vector(t(Total*matrizero))
}
View(Custos)
Condicoes <- matrix(0, ncol = length(Custos), nrow = nrow(Custos)+ncol(Custos))
for (i in 1:nrow(Custos)){
matrizero <- matrix(0, nrow = nrow(Custos), ncol = ncol(Custos))
matrizero[i,] <- 1
Condicoes[i, ] <- as.vector(t(Custos*matrizero))
}
Condicoes <- matrix(0, ncol = length(Custos), nrow = nrow(Custos)+ncol(Custos))
for (i in 1:nrow(Custos)){
matrizero <- matrix(0, nrow = nrow(Custos), ncol = ncol(Custos))
matrizero[i,] <- 1
Condicoes[i, ] <- as.vector(t(matrizero))
}
for (i in 1:ncol(Custos)){
matrizero <- matrix(0, nrow = nrow(Custos), ncol = ncol(Custos))
matrizero[,i] <- 1
Condicoes[nrow(Custos)+i,] <- as.vector(t(matrizero))
}
Coeficientes <- as.vector(t(Custos))
rm(list = ls())
#Simulaçao
numfor <- 15
dados <- data.frame(
Fornecedor = letters[1:numfor],
MWh = runif(numfor, 2000, 300000),
MG = runif(numfor, 80, 250),
PA = runif(numfor, 80, 250),
RJ = runif(numfor, 80, 250),
ES = runif(numfor, 80, 250),
MA = runif(numfor, 80, 250),
MA_COMERC = runif(numfor, 80, 250)
)
custos <- as.matrix(dados[,3:length(dados)])
coef.custo <- as.vector(t(custos))
condicoes <- vector(c(dados$MWh), total)
rm(list = ls())
#Simulaçao
numfor <- 15
dados <- data.frame(
Fornecedor = letters[1:numfor],
MWh = runif(numfor, 2000, 300000),
MG = runif(numfor, 80, 250),
PA = runif(numfor, 80, 250),
RJ = runif(numfor, 80, 250),
ES = runif(numfor, 80, 250),
MA = runif(numfor, 80, 250),
MA_COMERC = runif(numfor, 80, 250)
)
custos <- as.matrix(dados[,3:length(dados)])
#Simulação
total <- runif(ncol(custos), 0, 1)
total <- total/sum(total)*sum(dados$MWh)
coef.custo <- as.vector(t(custos))
coeficientes <- matrix(0, ncol = length(custos), nrow = nrow(custos)+ncol(custos))
for (i in 1:nrow(custos)){
matrizero <- matrix(0, nrow = nrow(custos), ncol = ncol(custos))
matrizero[i,] <- 1
coeficientes[i, ] <- as.vector(t(matrizero))
}
for (i in 1:ncol(custos)){
matrizero <- matrix(0, nrow = nrow(custos), ncol = ncol(custos))
matrizero[,i] <- 1
coeficientes[nrow(custos)+i,] <- as.vector(t(matrizero))
}
condicoes <- vector(c(dados$MWh), total)
condicoes <- vector(c(dados$MWh), total))
condicoes <- vector(c(dados$MWh), total))
condicoes <- c(dados$MWh), total)
condicoes <- c(dados$MWh, total)
condicoes
View(dados)
direc.cond <- rep("=",length(condicoes))
direc.cond
install.packages("RMySQL")
install.packages("RMySQL")
library("RMySQL")
ucscDb <- dbConnect(MySQL(), user="genome", host = "genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb,"show databases;"); dbDisconnect(ucscDb);
result
hg19 <- dbConnect(MySQL(), user="genome", db="hg19", host = "genome-mysql.cse.ucsc.edu")
allTables <- dbListTables(hg19)
length(allTables)
allTables[1:5]
dbListFields(hg19, "affyU133Plus2")
dbGetQuery(hg19, "select count(*) from affyU133Plus2")
affyData <- dbReadTable(hg19, "affyU133Plus2"); dbDisconnect(hg19);
head(affyData)
warnings()
query <- dbSendQuery(hg19, "select * from affyU133Plus2 where misMatches between 1 and 3")
hg19 <- dbConnect(MySQL(), user="genome", db="hg19", host = "genome-mysql.cse.ucsc.edu")
query <- dbSendQuery(hg19, "select * from affyU133Plus2 where misMatches between 1 and 3")
query <- dbSendQuery(hg19, "select * from affyU133Plus2 where misMatches between 1 and 3")
dbDisconnect(hg19);
hg19 <- dbConnect(MySQL(), user="genome", db="hg19", host = "genome-mysql.cse.ucsc.edu")
query <- dbSendQuery(hg19, "select * from affyU133Plus2 where misMatches between 1 and 3")
affyMis <- fetch(query); quantile(affyMis$misMatches)
affyMisSmall <- fetch(query, n=10); dbClearResult(query);
dim(affyMisSmall)
dbDisconnect(hg19);
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library("rhdf5")
created = h5createFile("example.h5")
created
created = h5createGroup("example.h5", "foo")
created = h5createGroup("example.h5", "baa")
created = h5createGroup("example.h5", "foo/foobaa")
h5ls("example.h5")
A <- matrix(1:10, nr = 5, nc = 2)
h5write(A, "example.h5", "foo/A")
B <- array(seq(0.1, 2.0, by = 0.1), dim =c(5, 2, 2))
attr(B, "scale") <- "liter"
h5write(B, "example.h5","foo/foobaa/B")
h5ls("example.h5")
df <- data.frame(1L:5L, seq(0, 1, length.out = 5), c("ab", "cde", "fghi", "a", "s"), stringsAsFactors = FALSE)
h5write(df, "example.h5", "df")
h5ls("example.h5")
readA <- h5read("example.h5", "foo/A")
readB <- h5read("example.h5", "foo/foobaa/B")
readdf <- h5read("example.h5", "df")
readA
readB
readdf
readdf
h5write(c(12, 13, 14), "example.h5","foo/A", index = list(1:3, 1))
h5read("example.h5", "foo/A")
library(httr)
rm(list = ls())
library(httr)
myapp <- oauth_app("twitter", key = "BZzSHR88APIPPoHCV0bHwbiHv", secret = "7s7tHnm8AJjWYgcnCgjdUaTkIid5nCYSHAfkwdtqqPM2kOgmXa")
sig <- sign_oauth1.0(myapp, token = "57534887-4CzAvyNXYx25YzYySFYIaA52op6jkEilK84iiJjsY",
token_secret = "TpMYeI1G5Zwj3bMlFCv7P002ldKFMLxhbuOrKnGuh9xD3")
homeTL <- GET("https://api.twitter.com/1.1/statuses/home_timeline.json", sig)
homeTL
json1 <- content(homeTL)
json2 <- jsonlite::fromJSON(toJSON(json1))
json2 <- jsonlite::fromJSON(json1)
json2 <- jsonlite::fromJSON(toString(json1))
json1
json2 <- jsonlite::fromJSON(json1)
library(rjson)
library('rjson')
install.packages('rjson')
library('rjson')
json2 <- jsonlite::fromJSON(toJSON(json1))
rm(list = ls())
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at
#    https://github.com/settings/developers. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "0e2139d207977ab2caa8"
secret = "2ce12311c1c7cf3159999e8c204dd6a9303b50dd"
)
# 2. To make your own application, register at
#    https://github.com/settings/developers. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "0e2139d207977ab2caa8",
secret = "2ce12311c1c7cf3159999e8c204dd6a9303b50dd"
)
myapp
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token
# 4. Use API
gtoken <- config(token = github_token)
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 2. To make your own application, register at
#    https://github.com/settings/developers. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "0e2139d207977ab2caa8",
secret = "2ce12311c1c7cf3159999e8c204dd6a9303b50dd"
)
rm(list = ls())
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at
#    https://github.com/settings/developers. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "0e2139d207977ab2caa8",
secret = "2ce12311c1c7cf3159999e8c204dd6a9303b50dd"
)
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
rm(list = ls())
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at
#    https://github.com/settings/developers. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "0e2139d207977ab2caa8",
secret = "2ce12311c1c7cf3159999e8c204dd6a9303b50dd"
)
rm(list = ls())
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at
#    https://github.com/settings/developers. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "0e2139d207977ab2caa8",
secret = "2ce12311c1c7cf3159999e8c204dd6a9303b50dd"
)
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token
rm(list = ls())
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at
#    https://github.com/settings/developers. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "0e2139d207977ab2caa8",
secret = "2ce12311c1c7cf3159999e8c204dd6a9303b50dd"
)
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp, cache = FALSE)
install.packages(" httpuv")
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at
#    https://github.com/settings/developers. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "0e2139d207977ab2caa8",
secret = "2ce12311c1c7cf3159999e8c204dd6a9303b50dd"
)
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp, cache = FALSE)
gtoken <- config(token = github_token)
gtoken
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
install.packages("httpuv")
library(httpuv)
library(httpuv)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at
#    https://github.com/settings/developers. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "0e2139d207977ab2caa8",
secret = "2ce12311c1c7cf3159999e8c204dd6a9303b50dd"
)
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp, cache = FALSE)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
# OR:
req <- with_config(gtoken, GET("https://api.github.com/rate_limit"))
content(req)
library(swirl)
swirl()
setwd('~/Estudos/Data Science/Getting-and-Cleaning-Data/Week3/')
rm(list = ls())
setwd('~/Estudos/Data Science/Getting-and-Cleaning-Data/Week3/')
library('swirl')
swirl()
swirl()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
gather(students2, key = sex_class, value = count)
gather(students2, key = sex_class, value = count, -grade)
gather(students2, sex_class, count, -grade)
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(data = res, col = sex_class, into = c("sex", "class"))
submit()
submit()
students3
View(students2)
?gahter
?gather
View(students3)
submit()
?spread
submit()
submit()
# This script builds on the previous one by appending
# a call to spread(), which will allow us to turn the
# values of the test column, midterm and final, into
# column headers (i.e. variables).
#
# You only need to specify two arguments to spread().
# Can you figure out what they are? (Hint: You don't
# have to specify the data argument since we're using
# the %>% operator.
#
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(key = test, c("midterm","final")) %>%
print
# This script builds on the previous one by appending
# a call to spread(), which will allow us to turn the
# values of the test column, midterm and final, into
# column headers (i.e. variables).
#
# You only need to specify two arguments to spread().
# Can you figure out what they are? (Hint: You don't
# have to specify the data argument since we're using
# the %>% operator.
#
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(key = test, -name)) %>%
print
# This script builds on the previous one by appending
# a call to spread(), which will allow us to turn the
# values of the test column, midterm and final, into
# column headers (i.e. variables).
#
# You only need to specify two arguments to spread().
# Can you figure out what they are? (Hint: You don't
# have to specify the data argument since we're using
# the %>% operator.
#
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(key = test, -name) %>%
print
submit()
library(readr)
parse_number("class5")
?mutate
# 1, 2, ..., 5 and not class1, class2, ..., class5.
#
# Use the mutate() function from dplyr along with
# parse_number(). Hint: You can "overwrite" a column
# with mutate() by assigning a new value to the existing
# column instead of creating a new column.
#
# Check out ?mutate and/or ?parse_number if you need
# a refresher.
#
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
mutate(class = parse_number(class))  %>%
print
submit()
students4
submit()
submit()
submit()
submit()
passed
failed
passed %>% mutate(status = 'passed')
passed <- passed %>% mutate(status = 'passed')
failed <- failed %>% mutate(status = 'failed')
?bind_rows
bind_rows(passed, failed)
sat
?separate
sat %>%
select(-contains("total")) %>%
gather(part_key, count, -score_range) %>%
separate(part_key, c("part","sex")) %>%
print
submit()
sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range) %>%
separate(part_sex, c("part", "sex")) %>%
group_by(part, sex) %>%
mutate(total = sum(count),
prop = count / total
) %>% print
submit()
setwd('~/Estudos/Data Science/Getting-and-Cleaning-Data/Week3/')
