read.csv("nonsuchfile")
library(swirl)
swirl()
q
info()
main()
main()
head(flags)
dim(flags)
View(flags)
class(flags)
cls <- lapply(flags, class)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect(sapply(flags, class))
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
fla_colors <- flag[,11:17]
flag_colors <- flag[,11:17]
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
View(shape_mat)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 6, 6))
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
lapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flgas, unique, numeric(1))
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
flags$landmass
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
swirl()
swirl()
library(swirl)
swirl()
library(datasets)
data(iris)
?iris
head(iris)
tapply(iris$Sepal.Length,iris$Species, mean)
apply(iris, 1, mean)
colMeans(iris)
rowMeans(iris[, 1:4])
apply(iris[, 1:4], 2, mean)
tapply(iris$Sepal.Length,iris$Species, mean)
saply(iris,mean)
sapply(iris,mean)
sapply(iris[, 1:4],mean)
sapply(iris[, 1:4],mean)
?apply
library(datasets)
data(mtcars)
?mtcars
head(mtcars)
tapply(mtcars$mpg,mtcars$cyl,avg)
tapply(mtcars$mpg,mtcars$cyl,mean)
tapply(mtcars$mpg,mtcars$cyl,average)
tapply(mtcars$mpg,mtcars$cyl,mean)
split(mtcars, mtcars$cyl)
sapply(mtcars, cyl, mean)
mean(mtcars$mpg, mtcars$cyl)
tapply(mtcars$cyl, mtcars$mpg, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
tapply(mtcars$mpg,mtcars$cyl,mean)
lapply(mtcars, mean)
with(mtcars, tapply(mpg, cyl, mean))
sapply(split(mtcars$mpg, mtcars$cyl), mean)
apply(mtcars, 2, mean)
head(mtcars)
HP_mean <- tapply(mtcars$hp, mtcars$cyl, mean)
hp_mean
HP_mean
HP_mean(3)-HP_mean(1)
HP_mean[3]-HP_mean[1]
debug(ls)
debug(ls)
ls
debug(ls)
ls()
HP_mean
rm(list = ls())
library(swirl)
swirl()
quit
quit()
library(swirl)
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips <- sample(1:2, 100, replace = TRUE, prob = c(0.3, 0.7))
flips <- sample(0:1, 100, replace = TRUE, prob = c(0.3, 0.7))
flips <- sample(c(0, 1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0,7)
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(n = 1, 100, prob = 0.7)
flips2 <- rbinom(n = 100, 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(100, 100, 25)
rnorm(100, mean = 100, sd = 25)
rnorm(10, mean = 100, sd = 25)
?rpois
rpois(5, 10)
replicate(100, rpois(5, 10))
my_pois <- replicate(100, rpois(5, 10))
my_pois
colMeans(my_pois)
cm <- colMeans(my_pois)
hist(cm)
library(swirl)
swirl()
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$speed, y = cars$dist)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(cars, main("My Plot"))
plot(cars, main = "My Plot")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10, 15))
plot(cars, pch = 2)
data(mtcars)
head(mtcars)
dim(mtcars)
str(mtcars)
summary(mtcars)
?boxplot
boxplot(mpg ~ cyl, mtcars)
hist(mtcars$mpg)
rm(list = ls())
nfor <- 15
dados <- data.frame(
Fornecedor = letters[1:nfor],
MWh = runif(nfor, 2000, 300000),
MG = runif(nfor, 80, 250),
PA = runif(nfor, 80, 250),
RJ = runif(nfor, 80, 250),
ES = runif(nfor, 80, 250),
MA = runif(nfor, 80, 250),
MA_COMERC = runif(nfor, 80, 250)
)
dados
Custos <- dados[,3:length(dados)]
Custos
Custos <- as.matrix(dados[,3:length(dados)])
Custos
Total <- runif(length(Custos), 0, 1)
Total <- Total/sum(Total)*sum(dados$MWh)
Total
Custos
length(dados)
length(Custos)
nrow(Custos)
Total <- runif(ncol(Custos), 0, 1)
Total <- Total/sum(Total)*sum(dados$MWh)
Total
sum(Total)=sum(dados$MWh)
sum(Total)==sum(dados$MWh)
str(dados)
str(Custos)
vetorz <- as.matrix(rep(length(Custos), nrow = 15)
vetorz
vetorz <- as.matrix(rep(length(Custos))
vetorz
vetorz <- as.matrix(rep(length(Custos, 0))
vetorz
vetorz <- as.matrix(rep(length(Custos), 0))
vetorz
rep(0,10)
rep(0,length(Custos))
rm(vetorz)
rep(0,length(Custos))
as.matriz(rep(0,length(Custos)))
as.matrix(rep(0,length(Custos)))
as.matrix(rep(0,length(Custos)), nrow = nrow(Custos))
nrow(Custos)
matrix(rep(0,length(Custos)), nrow = nrow(Custos))
matrizero <- matrix(rep(0,length(Custos)), nrow = nrow(Custos))
matrizero[1,] <- 1
matrizero
Total*matrizero
Total%*%matrizero
Total*matrizero
ncol(matrizero)
as.vector(t(Total*matrizero))
condicoes <- matrix()
condicoes[1,] <-as.vector(t(Total*matrizero))
Total[1,]
Total[1,]
Total[1,1]
Total
Custos[1,]
condicoes[1,]
condicoes[1,] <- Condicoes[1,] + as.vector(t(Total*matrizero))
condicoes[1,] <- condicoes[1,] + as.vector(t(Total*matrizero))
condicoes <- matrix(0, ncol = 10, nrow = 10)
Condicoes <- matrix(0, ncol = length(Total), nrow = 10)
View(condicoes)
Condicoes
Condicoes <- matrix(0, ncol = length(Custos), nrow = 10)
Condicoes
Custos
Condicoes <- matrix(0, ncol = length(Custos), nrow = nrow(Custos)+ncol(Custos))
Condicoes
View(Condicoes)
View(Custos)
matrix(0, nrow = nrow(Custos), ncol = ncol(Custos))
for (i in 1:ncol(Total)){
matrizero <- matrix(0, nrow = nrow(Custos), ncol = ncol(Custos))
matrizero[i,] <- 1
Condicoes[i, ] <- as.vector(t(Total*matrizero))
}
ncol(Total)
length(Total)
ncol(Custos)
nrow(Custos)
for (i in 1:nrow(Custos)){
matrizero <- matrix(0, nrow = nrow(Custos), ncol = ncol(Custos))
matrizero[i,] <- 1
Condicoes[i, ] <- as.vector(t(Total*matrizero))
}
View(Condicoes)
rm(condicoes)
for (i in 1:ncol(Custos)){
matrizero <- matrix(0, nrow = nrow(Custos), ncol = ncol(Custos))
matrizero[,i] <- 1
Condicoes[nrow(Custos)+i,] <- as.vector(t(Total*matrizero))
}
rm(list = ls())
#Simulaçao
numfor <- 15
dados <- data.frame(
Fornecedor = letters[1:numfor],
MWh = runif(numfor, 2000, 300000),
MG = runif(numfor, 80, 250),
PA = runif(numfor, 80, 250),
RJ = runif(numfor, 80, 250),
ES = runif(numfor, 80, 250),
MA = runif(numfor, 80, 250),
MA_COMERC = runif(numfor, 80, 250)
)
Custos <- as.matrix(dados[,3:length(dados)])
#Simulação
Total <- runif(ncol(Custos), 0, 1)
Total <- Total/sum(Total)*sum(dados$MWh)
Condicoes <- matrix(0, ncol = length(Custos), nrow = nrow(Custos)+ncol(Custos))
for (i in 1:nrow(Custos)){
matrizero <- matrix(0, nrow = nrow(Custos), ncol = ncol(Custos))
matrizero[i,] <- 1
Condicoes[i, ] <- as.vector(t(Total*matrizero))
}
for (i in 1:ncol(Custos)){
matrizero <- matrix(0, nrow = nrow(Custos), ncol = ncol(Custos))
matrizero[,i] <- 1
Condicoes[nrow(Custos)+i,] <- as.vector(t(Total*matrizero))
}
View(Custos)
Condicoes <- matrix(0, ncol = length(Custos), nrow = nrow(Custos)+ncol(Custos))
for (i in 1:nrow(Custos)){
matrizero <- matrix(0, nrow = nrow(Custos), ncol = ncol(Custos))
matrizero[i,] <- 1
Condicoes[i, ] <- as.vector(t(Custos*matrizero))
}
Condicoes <- matrix(0, ncol = length(Custos), nrow = nrow(Custos)+ncol(Custos))
for (i in 1:nrow(Custos)){
matrizero <- matrix(0, nrow = nrow(Custos), ncol = ncol(Custos))
matrizero[i,] <- 1
Condicoes[i, ] <- as.vector(t(matrizero))
}
for (i in 1:ncol(Custos)){
matrizero <- matrix(0, nrow = nrow(Custos), ncol = ncol(Custos))
matrizero[,i] <- 1
Condicoes[nrow(Custos)+i,] <- as.vector(t(matrizero))
}
Coeficientes <- as.vector(t(Custos))
rm(list = ls())
#Simulaçao
numfor <- 15
dados <- data.frame(
Fornecedor = letters[1:numfor],
MWh = runif(numfor, 2000, 300000),
MG = runif(numfor, 80, 250),
PA = runif(numfor, 80, 250),
RJ = runif(numfor, 80, 250),
ES = runif(numfor, 80, 250),
MA = runif(numfor, 80, 250),
MA_COMERC = runif(numfor, 80, 250)
)
custos <- as.matrix(dados[,3:length(dados)])
coef.custo <- as.vector(t(custos))
condicoes <- vector(c(dados$MWh), total)
rm(list = ls())
#Simulaçao
numfor <- 15
dados <- data.frame(
Fornecedor = letters[1:numfor],
MWh = runif(numfor, 2000, 300000),
MG = runif(numfor, 80, 250),
PA = runif(numfor, 80, 250),
RJ = runif(numfor, 80, 250),
ES = runif(numfor, 80, 250),
MA = runif(numfor, 80, 250),
MA_COMERC = runif(numfor, 80, 250)
)
custos <- as.matrix(dados[,3:length(dados)])
#Simulação
total <- runif(ncol(custos), 0, 1)
total <- total/sum(total)*sum(dados$MWh)
coef.custo <- as.vector(t(custos))
coeficientes <- matrix(0, ncol = length(custos), nrow = nrow(custos)+ncol(custos))
for (i in 1:nrow(custos)){
matrizero <- matrix(0, nrow = nrow(custos), ncol = ncol(custos))
matrizero[i,] <- 1
coeficientes[i, ] <- as.vector(t(matrizero))
}
for (i in 1:ncol(custos)){
matrizero <- matrix(0, nrow = nrow(custos), ncol = ncol(custos))
matrizero[,i] <- 1
coeficientes[nrow(custos)+i,] <- as.vector(t(matrizero))
}
condicoes <- vector(c(dados$MWh), total)
condicoes <- vector(c(dados$MWh), total))
condicoes <- vector(c(dados$MWh), total))
condicoes <- c(dados$MWh), total)
condicoes <- c(dados$MWh, total)
condicoes
View(dados)
direc.cond <- rep("=",length(condicoes))
direc.cond
rm(list = ls())
library(XML)
fileURl <- "http://www.espn.com/nfl/team/_/name/bal/baltimore-ravens"
doc <- htmlTreeParse(fileURl, useInternalNodes = TRUE)
scores <- xpathSApply(doc, "//li[@class='score']",xmlValue)
teams <- xpathSApply()
teams <- xpathSApply(doc, "//li[@class='team-name']")
doc <- htmlTreeParse(fileURl)
scores <- xpathSApply(doc, "//li[@class='score']",xmlValue)
doc <- htmlTreeParse(fileURl, useInternalNodes = TRUE)
doc <- htmlTreeParse(fileURl, useInternal = TRUE)
scores <- xpathSApply(doc, "//li[@class='score']",xmlValue)
doc
scores <- xpathSApply(doc, "//li[@class='sCore']",xmlValue)
scores <- xpathSApply(doc, "//div[@class='sCore']",xmlValue)
scores <- xpathSApply(doc, "//div[@class='sCore']",xmlValue)
scores <- xpathSApply(doc, '//div[@class="sCore""]',xmlValue)
scores <- xpathSApply(doc, '//div[@class="score]',xmlValue)
scores <- xpathSApply(doc, '//div[@class="score"]',xmlValue)
scores
teams <- xpathSApply(doc, '//li[@class="team-name]')
teams <- xpathSApply(doc, '//li[@class="team-name"]')
teams <- xpathSApply(doc, '//div[@class="team-name"]')
teams <- xpathSApply(doc, '//div[@class="game-info"]')
teams
scores
teams <- xpathSApply(doc, '//div[@class="game-info"]',xmlValue)
teams
teams[,3]
teams[]
teams[2]
teams[][1]
sub("vs ","",teams)
teams <- sub("vs  ","",teams)
teams
teams <- sub("@  ","",teams)
teams
scores
teams
=
rm(list = ls())
library(jsonlite)
jsonData <- fromJSON("https://api.github.com/users/jtleek/repos")
jsonData
names(jsonData)
names(jsonData$owner)
jsonData$owner$login
myjson <- toJSON(iris,pretty = TRUE)
myjson
cat(myjson)
cat(myjson)
iris2 <- fromJSON(myjson)
iris2
head(iris2)
library(data.table)
install.packages(data.table)
library("data.table")
install.packages("data.table")
library("data.table")
install.packages("r-data.table")
install.packages(c("curl", "openssl", "R6", "rlang", "stringi", "stringr"))
R.version
install.packages("r-data.table")
library("data.table")
DF = data.frame(x=rnorm(9), y=rep(c("a","b","c"),each = 3), z=rnorm(9))
head(DF,3)
DT = data.table(x=rnorm(9), y=rep(c("a","b","c"),each = 3), z=rnorm(9))
head(DT,3)
tables()
DT[2,]
DT[DT$y="a",]
DT[DT$y=="a",]
DT = data.table(x=rnorm(9), y=rep(c("a","b","c"),each = 3), z=rnorm(9))
head(DT,3)
tables()
DT[2,]
DT[DT$y=="a",]
DT[c(2,3)]
DF[c(2,3)]
DT[c(2,3)]
DF[c(2,3)]
DT[,c(2,3)]
DF[,c(2,3)]
DT[,mean(x),sum(z)]
DT[,list(mean(x),sum(z))]
DT(,table(y))
DT[,table(y)]
DT[,w:=z²]
DT[,w:=z^2]
DT
DT2 <- DT
DT2 <- DT
DT2
DT2 <- DT
DT2
DT[,y:=2]
DT[,y=2]
DT
DT2
DT[, m:={tmp <- (x+z); log2(tmp+5)}]
DT
DT[,a:=x>0]
DT
DT[,b:=mean(x+w), by=a]
DT
set.seed(123);
DT <- data.table(x=sample(letters[1:3], 1E5, TRUE))
DT[, .N, by=X]
DT[, .N, by=x]
DT <- data.table[x=rep(c("a","b","c", each = 100)), y=rnorm(300)]
DT <- data.table[x=rep(c("a","b","c"), each = 100), y=rnorm(300)]
DT <- data.table(x=rep(c("a","b","c"), each = 100), y=rnorm(300))
setkey(DT,x)
DT['a']
DT1 <- data.table(x=c('a','a','b','dt1'),y=1:4)
DT2 <- data.table(x=c('a', 'b','dt2'),z=5:7)
setkey(DT1,x)
setkey(DT2,x)
merge(DT1,DT2)
source('~/.active-rstudio-document')
big_df <- data.frame(x = rnorm(1E6), y = rnorm(1E6))
file <- tempfile()
big_df <- data.frame(x = rnorm(1E6), y = rnorm(1E6))
file <- tempfile()
write.table(big_df, file = file, row.names = FALSE, col.names = TRUE, sep="\t", quote = FALSE)
system.time(fread(file))
system.time(read.table(file,header = TRUE, sep = "\t"))
setwd("~/Estudos/Data Science/Getting-and-Cleaning-Data/Week1")
library('swirl')
install_from_swirl("Getting and Cleaning Data")
